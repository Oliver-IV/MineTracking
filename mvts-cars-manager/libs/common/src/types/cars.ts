// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/cars.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "cars";

export enum MeasurementUnit {
  KG = 0,
  TON = 1,
  KTON = 2,
  UNRECOGNIZED = -1,
}

export enum CarType {
  HEAVY = 0,
  MEDIUM = 1,
  LIGHT = 2,
  UNRECOGNIZED = -1,
}

export enum State {
  AVAILABLE = 0,
  UNAVAILABLE = 1,
  ON_ROUTE = 2,
  UNRECOGNIZED = -1,
}

export interface UpdateCarDto {
  carId: string;
  name?: string | undefined;
  state?: State | undefined;
  capacity?: Capacity | undefined;
  type?: CarType | undefined;
}

export interface FindOneCarDto {
  carId: string;
}

export interface Empty {
}

export interface Cars {
  cars: Car[];
}

export interface CreateCarDto {
  name: string;
  capacity: Capacity | undefined;
  type: CarType;
}

export interface Capacity {
  capacityId: string;
  measurementUnit: MeasurementUnit;
  value: number;
}

export interface Car {
  carId: string;
  name: string;
  capacity: Capacity | undefined;
  type: CarType;
  state: State;
}

export const CARS_PACKAGE_NAME = "cars";

export interface CarsServiceClient {
  createCar(request: CreateCarDto): Observable<Car>;

  findAllCars(request: Empty): Observable<Cars>;

  findOneCar(request: FindOneCarDto): Observable<Car>;

  updateCar(request: UpdateCarDto): Observable<Car>;

  removeCar(request: FindOneCarDto): Observable<Car>;
}

export interface CarsServiceController {
  createCar(request: CreateCarDto): Promise<Car> | Observable<Car> | Car;

  findAllCars(request: Empty): Promise<Cars> | Observable<Cars> | Cars;

  findOneCar(request: FindOneCarDto): Promise<Car> | Observable<Car> | Car;

  updateCar(request: UpdateCarDto): Promise<Car> | Observable<Car> | Car;

  removeCar(request: FindOneCarDto): Promise<Car> | Observable<Car> | Car;
}

export function CarsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createCar", "findAllCars", "findOneCar", "updateCar", "removeCar"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CarsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CarsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CARS_SERVICE_NAME = "CarsService";
