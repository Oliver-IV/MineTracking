// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/traffic-lights.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "trafficLights";

export enum State {
  RED = 0,
  YELLOW = 1,
  GREEN = 2,
  UNRECOGNIZED = -1,
}

export enum Mode {
  AUTO = 0,
  MANUAL = 1,
  UNRECOGNIZED = -1,
}

export interface ChangeLightStateDto {
  trafficLightId: string;
  state: State;
}

export interface UpdateTrafficLightDto {
  trafficLightId: string;
  name?: string | undefined;
  location?: Location | undefined;
  mode?: Mode | undefined;
}

export interface FindOneTrafficLightDto {
  id: string;
}

export interface Empty {
}

export interface TrafficLights {
  trafficLights: TrafficLight[];
}

export interface CreateTrafficLightDto {
  name: string;
  location: Location | undefined;
  mode: Mode;
}

export interface Location {
  locationId: string;
  latitude: string;
  longitude: string;
}

export interface TrafficLight {
  trafficLightId: string;
  name: string;
  location: Location | undefined;
  mode: Mode;
  state: State;
}

export const TRAFFIC_LIGHTS_PACKAGE_NAME = "trafficLights";

export interface TrafficLightsServiceClient {
  createTrafficLight(request: CreateTrafficLightDto): Observable<TrafficLight>;

  findAllTrafficLights(request: Empty): Observable<TrafficLights>;

  findOneTrafficLight(request: FindOneTrafficLightDto): Observable<TrafficLight>;

  updateTrafficLight(request: UpdateTrafficLightDto): Observable<TrafficLight>;

  removeTrafficLight(request: FindOneTrafficLightDto): Observable<TrafficLight>;

  changeTrafficLightState(request: ChangeLightStateDto): Observable<Empty>;
}

export interface TrafficLightsServiceController {
  createTrafficLight(request: CreateTrafficLightDto): Promise<TrafficLight> | Observable<TrafficLight> | TrafficLight;

  findAllTrafficLights(request: Empty): Promise<TrafficLights> | Observable<TrafficLights> | TrafficLights;

  findOneTrafficLight(request: FindOneTrafficLightDto): Promise<TrafficLight> | Observable<TrafficLight> | TrafficLight;

  updateTrafficLight(request: UpdateTrafficLightDto): Promise<TrafficLight> | Observable<TrafficLight> | TrafficLight;

  removeTrafficLight(request: FindOneTrafficLightDto): Promise<TrafficLight> | Observable<TrafficLight> | TrafficLight;

  changeTrafficLightState(request: ChangeLightStateDto): Promise<Empty> | Observable<Empty> | Empty;
}

export function TrafficLightsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createTrafficLight",
      "findAllTrafficLights",
      "findOneTrafficLight",
      "updateTrafficLight",
      "removeTrafficLight",
      "changeTrafficLightState",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TrafficLightsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TrafficLightsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TRAFFIC_LIGHTS_SERVICE_NAME = "TrafficLightsService";
