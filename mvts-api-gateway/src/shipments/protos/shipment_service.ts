// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: src/shipments/protos/shipment_service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "shipment";

export interface ListShipmentDTO {
  shipments: ShipmentDTO[];
}

export interface ShipmentCreateDTO {
  idVehicle: number;
  idRoute: number;
  material: number;
  quantity: number;
}

export interface EmptyMessage {
}

export interface GetShipmentByDateRequest {
  optionDate: number;
}

export interface ShipmentByIdDTO {
  id: number;
}

export interface ShipmentDTO {
  id: number;
  idVehicle: number;
  idRoute: number;
  state: number;
  material: number;
  quantity: number;
  dateDelivered?: string | undefined;
}

export interface ErrorResponse {
  name: string;
  details: string[];
}

export const SHIPMENT_PACKAGE_NAME = "shipment";

export interface ShipmentServiceClient {
  createShipment(request: ShipmentCreateDTO): Observable<ShipmentByIdDTO>;

  getShipmentById(request: ShipmentByIdDTO): Observable<ShipmentDTO>;

  getAll(request: EmptyMessage): Observable<ListShipmentDTO>;

  getByDate(request: GetShipmentByDateRequest): Observable<ListShipmentDTO>;
}

export interface ShipmentServiceController {
  createShipment(request: ShipmentCreateDTO): Promise<ShipmentByIdDTO> | Observable<ShipmentByIdDTO> | ShipmentByIdDTO;

  getShipmentById(request: ShipmentByIdDTO): Promise<ShipmentDTO> | Observable<ShipmentDTO> | ShipmentDTO;

  getAll(request: EmptyMessage): Promise<ListShipmentDTO> | Observable<ListShipmentDTO> | ListShipmentDTO;

  getByDate(
    request: GetShipmentByDateRequest,
  ): Promise<ListShipmentDTO> | Observable<ListShipmentDTO> | ListShipmentDTO;
}

export function ShipmentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createShipment", "getShipmentById", "getAll", "getByDate"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ShipmentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ShipmentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SHIPMENT_SERVICE_NAME = "ShipmentService";
