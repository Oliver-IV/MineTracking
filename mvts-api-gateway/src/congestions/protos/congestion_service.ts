// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: src/congestions/protos/congestion_service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "congestion";

export interface ListCongestionDTO {
  congestions: CongestionDTO[];
}

export interface CongestionCreateDTO {
  name: string;
  lat: number;
  lng: number;
}

export interface GetCongestionRequest {
}

export interface CongestionByIdDTO {
  id: number;
}

export interface CongestionDTO {
  id: number;
  name: string;
  lat: number;
  lng: number;
  createdAt: string;
}

export interface ErrorResponse {
  name: string;
  details: string[];
}

export const CONGESTION_PACKAGE_NAME = "congestion";

export interface CongestionServiceClient {
  createCongestion(request: CongestionCreateDTO): Observable<CongestionByIdDTO>;

  getCongestionById(request: CongestionByIdDTO): Observable<CongestionDTO>;

  getAll(request: GetCongestionRequest): Observable<ListCongestionDTO>;
}

export interface CongestionServiceController {
  createCongestion(
    request: CongestionCreateDTO,
  ): Promise<CongestionByIdDTO> | Observable<CongestionByIdDTO> | CongestionByIdDTO;

  getCongestionById(request: CongestionByIdDTO): Promise<CongestionDTO> | Observable<CongestionDTO> | CongestionDTO;

  getAll(request: GetCongestionRequest): Promise<ListCongestionDTO> | Observable<ListCongestionDTO> | ListCongestionDTO;
}

export function CongestionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createCongestion", "getCongestionById", "getAll"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CongestionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CongestionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CONGESTION_SERVICE_NAME = "CongestionService";
