// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: src/routes/protos/routes.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "routes_service";

/** Requests */
export interface CreateRouteDTO {
  startId: string;
  endId: string;
}

export interface LocationDTO {
  id: string;
  name: string;
  latitude: number;
  longitude: number;
}

export interface UpdateRouteDTO {
  routeId: string;
  startId: string;
  endId: string;
}

export interface DeleteRouteDTO {
  routeId: string;
}

/** Responses */
export interface CreateRouteResponse {
  routeId: string;
  start: LocationDTO | undefined;
  end: LocationDTO | undefined;
}

export interface UptateRouteResponse {
  routeId: string;
  start: LocationDTO | undefined;
  end: LocationDTO | undefined;
}

export interface RouteResponse {
  routeId: string;
  start: LocationDTO | undefined;
  end: LocationDTO | undefined;
}

export interface FindAllRoutesResponse {
  routes: RouteResponse[];
}

export interface DeleteRouteResponse {
  routeId: string;
  deleted: boolean;
}

export interface FindAllLocationsResponse {
  locations: LocationDTO[];
}

export interface EmptyMessage {
}

export const ROUTES_SERVICE_PACKAGE_NAME = "routes_service";

export interface RoutesServiceClient {
  createRoute(request: CreateRouteDTO): Observable<CreateRouteResponse>;

  findAllRoutes(request: EmptyMessage): Observable<FindAllRoutesResponse>;

  updateRoute(request: UpdateRouteDTO): Observable<UptateRouteResponse>;

  deleteRoute(request: DeleteRouteDTO): Observable<DeleteRouteResponse>;

  findAllLocations(request: EmptyMessage): Observable<FindAllLocationsResponse>;
}

export interface RoutesServiceController {
  createRoute(
    request: CreateRouteDTO,
  ): Promise<CreateRouteResponse> | Observable<CreateRouteResponse> | CreateRouteResponse;

  findAllRoutes(
    request: EmptyMessage,
  ): Promise<FindAllRoutesResponse> | Observable<FindAllRoutesResponse> | FindAllRoutesResponse;

  updateRoute(
    request: UpdateRouteDTO,
  ): Promise<UptateRouteResponse> | Observable<UptateRouteResponse> | UptateRouteResponse;

  deleteRoute(
    request: DeleteRouteDTO,
  ): Promise<DeleteRouteResponse> | Observable<DeleteRouteResponse> | DeleteRouteResponse;

  findAllLocations(
    request: EmptyMessage,
  ): Promise<FindAllLocationsResponse> | Observable<FindAllLocationsResponse> | FindAllLocationsResponse;
}

export function RoutesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createRoute", "findAllRoutes", "updateRoute", "deleteRoute", "findAllLocations"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RoutesService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RoutesService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ROUTES_SERVICE_NAME = "RoutesService";
