// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: traffic-lights.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "trafficLights";

export enum State {
  RED = 0,
  YELLOW = 1,
  GREEN = 2,
  UNRECOGNIZED = -1,
}

export function stateFromJSON(object: any): State {
  switch (object) {
    case 0:
    case "RED":
      return State.RED;
    case 1:
    case "YELLOW":
      return State.YELLOW;
    case 2:
    case "GREEN":
      return State.GREEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return State.UNRECOGNIZED;
  }
}

export function stateToJSON(object: State): string {
  switch (object) {
    case State.RED:
      return "RED";
    case State.YELLOW:
      return "YELLOW";
    case State.GREEN:
      return "GREEN";
    case State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Mode {
  AUTO = 0,
  MANUAL = 1,
  UNRECOGNIZED = -1,
}

export function modeFromJSON(object: any): Mode {
  switch (object) {
    case 0:
    case "AUTO":
      return Mode.AUTO;
    case 1:
    case "MANUAL":
      return Mode.MANUAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Mode.UNRECOGNIZED;
  }
}

export function modeToJSON(object: Mode): string {
  switch (object) {
    case Mode.AUTO:
      return "AUTO";
    case Mode.MANUAL:
      return "MANUAL";
    case Mode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Empty {
}

export interface TrafficLights {
  trafficLights: TrafficLight[];
}

export interface Location {
  locationId: string;
  latitude: string;
  longitude: string;
}

export interface TrafficLight {
  trafficLightId: string;
  name: string;
  location: Location | undefined;
  mode: Mode;
  state: State;
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseTrafficLights(): TrafficLights {
  return { trafficLights: [] };
}

export const TrafficLights: MessageFns<TrafficLights> = {
  encode(message: TrafficLights, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.trafficLights) {
      TrafficLight.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrafficLights {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrafficLights();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trafficLights.push(TrafficLight.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrafficLights {
    return {
      trafficLights: globalThis.Array.isArray(object?.trafficLights)
        ? object.trafficLights.map((e: any) => TrafficLight.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TrafficLights): unknown {
    const obj: any = {};
    if (message.trafficLights?.length) {
      obj.trafficLights = message.trafficLights.map((e) => TrafficLight.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrafficLights>, I>>(base?: I): TrafficLights {
    return TrafficLights.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrafficLights>, I>>(object: I): TrafficLights {
    const message = createBaseTrafficLights();
    message.trafficLights = object.trafficLights?.map((e) => TrafficLight.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLocation(): Location {
  return { locationId: "", latitude: "", longitude: "" };
}

export const Location: MessageFns<Location> = {
  encode(message: Location, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locationId !== "") {
      writer.uint32(10).string(message.locationId);
    }
    if (message.latitude !== "") {
      writer.uint32(18).string(message.latitude);
    }
    if (message.longitude !== "") {
      writer.uint32(26).string(message.longitude);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Location {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.locationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.latitude = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.longitude = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Location {
    return {
      locationId: isSet(object.locationId) ? globalThis.String(object.locationId) : "",
      latitude: isSet(object.latitude) ? globalThis.String(object.latitude) : "",
      longitude: isSet(object.longitude) ? globalThis.String(object.longitude) : "",
    };
  },

  toJSON(message: Location): unknown {
    const obj: any = {};
    if (message.locationId !== "") {
      obj.locationId = message.locationId;
    }
    if (message.latitude !== "") {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== "") {
      obj.longitude = message.longitude;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Location>, I>>(base?: I): Location {
    return Location.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Location>, I>>(object: I): Location {
    const message = createBaseLocation();
    message.locationId = object.locationId ?? "";
    message.latitude = object.latitude ?? "";
    message.longitude = object.longitude ?? "";
    return message;
  },
};

function createBaseTrafficLight(): TrafficLight {
  return { trafficLightId: "", name: "", location: undefined, mode: 0, state: 0 };
}

export const TrafficLight: MessageFns<TrafficLight> = {
  encode(message: TrafficLight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trafficLightId !== "") {
      writer.uint32(10).string(message.trafficLightId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(26).fork()).join();
    }
    if (message.mode !== 0) {
      writer.uint32(32).int32(message.mode);
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrafficLight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrafficLight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trafficLightId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrafficLight {
    return {
      trafficLightId: isSet(object.trafficLightId) ? globalThis.String(object.trafficLightId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      location: isSet(object.location) ? Location.fromJSON(object.location) : undefined,
      mode: isSet(object.mode) ? modeFromJSON(object.mode) : 0,
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: TrafficLight): unknown {
    const obj: any = {};
    if (message.trafficLightId !== "") {
      obj.trafficLightId = message.trafficLightId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    if (message.mode !== 0) {
      obj.mode = modeToJSON(message.mode);
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrafficLight>, I>>(base?: I): TrafficLight {
    return TrafficLight.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrafficLight>, I>>(object: I): TrafficLight {
    const message = createBaseTrafficLight();
    message.trafficLightId = object.trafficLightId ?? "";
    message.name = object.name ?? "";
    message.location = (object.location !== undefined && object.location !== null)
      ? Location.fromPartial(object.location)
      : undefined;
    message.mode = object.mode ?? 0;
    message.state = object.state ?? 0;
    return message;
  },
};

export type TrafficLightsServiceService = typeof TrafficLightsServiceService;
export const TrafficLightsServiceService = {
  findAllTrafficLights: {
    path: "/trafficLights.TrafficLightsService/FindAllTrafficLights",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: TrafficLights) => Buffer.from(TrafficLights.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TrafficLights.decode(value),
  },
} as const;

export interface TrafficLightsServiceServer extends UntypedServiceImplementation {
  findAllTrafficLights: handleUnaryCall<Empty, TrafficLights>;
}

export interface TrafficLightsServiceClient extends Client {
  findAllTrafficLights(
    request: Empty,
    callback: (error: ServiceError | null, response: TrafficLights) => void,
  ): ClientUnaryCall;
  findAllTrafficLights(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TrafficLights) => void,
  ): ClientUnaryCall;
  findAllTrafficLights(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TrafficLights) => void,
  ): ClientUnaryCall;
}

export const TrafficLightsServiceClient = makeGenericClientConstructor(
  TrafficLightsServiceService,
  "trafficLights.TrafficLightsService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TrafficLightsServiceClient;
  service: typeof TrafficLightsServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
