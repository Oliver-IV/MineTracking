services:
  gateway:
    build:
      context: ./mvts-api-gateway
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    env_file:
      - ./mvts-api-gateway/.env
    networks:
      - frontend
      - backend
    volumes:
      - ./mvts-api-gateway/certs:/usr/src/app/certs
  auth:
    container_name: auth
    build:
      context: ./mvts-auth-service
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./mvts-auth-service/.env
    depends_on:
      - db
    expose:
      - "5000"
    networks:
      - backend
    volumes:
      - ./mvts-auth-service/certs:/usr/src/app/certs
  congestion:
    container_name: congestion
    build:
      context: ./mvts_congestion_service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - db
      - rmq
    networks:
      - backend
    environment:
      - ConnectionStrings__PostgreSQLConnection=Host=db;Username=postgres;Password=postgres;Database=mvts_congestions_db
  shipment:
    container_name: shipment
    build:
      context: ./mtvs_shipment_service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - db
    networks:
      - backend
    environment:
      - ConnectionStrings__PostgreSQLConnection=Host=db;Username=postgres;Password=postgres;Database=mvts_shipments_db
  db:
    image: postgres
    container_name: db
    restart: always
    # set shared memory limit when using docker compose
    # shm_size: 128mb
    ports:
      - '5432:5432'
    networks:
      - backend
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_MULTIPLE_DATABASES: mvts_users_db, mvts_congestions_db, mvts_shipments_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    # env_file:
    #   - ./postgres/.env
  rmq:
    image: rabbitmq:3-management
    container_name: rmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - backend
volumes:
  postgres_data:

networks:
  frontend:
  backend: