services:
  gateway:
    build:
      context: ./mvts-api-gateway
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    env_file:
      - ./mvts-api-gateway/.env
    networks:
      - frontend
      - backend
    volumes:
      - ./mvts-api-gateway/certs:/usr/src/app/certs:ro
  cars-manager:
    container_name: cars-manager
    build:
      context: ./mvts-cars-manager
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./mvts-cars-manager/.env
    expose:
      - "5000"
    volumes:
      - ./mvts-cars-manager/certs:/usr/src/app/certs
    # ports:
    #   - '5001:5000'
    depends_on:
      - db
      - rmq
    networks:
      - backend
  traffic-lights-manager:
    container_name: traffic-lights-manager
    build:
      context: ./mvts-traffic-lights-manager
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./mvts-traffic-lights-manager/.env
    depends_on:
      - db
      - rmq
    ports:
      - "5000:5000"
    volumes:
      - ./mvts-traffic-lights-manager/certs:/usr/src/app/certs
    # ports:
    #   - '5002:5000'
    networks:
      - backend
  auth:
    container_name: auth
    build:
      context: ./mvts-auth-service
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./mvts-auth-service/.env
    depends_on:
      - db
    expose:
      - "5000"
    networks:
      - backend
    volumes:
      - ./mvts-auth-service/certs:/usr/src/app/certs
  congestion:
    container_name: congestion
    build:
      context: ./mvts_congestion_service
      dockerfile: Dockerfile
    restart: always
    expose:
      - "5000"
    depends_on:
      - db
      - rmq
    networks:
      - backend
    environment:
      - ConnectionStrings__PostgreSQLConnection=Host=db;Username=postgres;Password=postgres;Database=mvts_congestions_db
  shipment:
    container_name: shipment
    build:
      context: ./mtvs_shipment_service
      dockerfile: Dockerfile
    restart: always
    expose:
      - "8080"
    depends_on:
      - db
    networks:
      - backend
    environment:
      - ConnectionStrings__PostgreSQLConnection=Host=db;Username=postgres;Password=postgres;Database=mvts_shipments_db
  car-tracker:
    build:
      context: ./mtvs-car-tracker
      dockerfile: Dockerfile
    restart: always
    expose:
      - "3000"
    networks:
      - backend
    depends_on:
      - rmq
      - mqtt
    env_file:
      - ./mtvs-car-tracker/.env
  routes-manager:
    build: 
      context: ./mvts-routes-service
      dockerfile: Dockerfile
    container_name: routes-manager
    depends_on:
      - db
    networks:
      - backend
    expose:
      - "5000"
    env_file:
      - ./mvts-routes-service/.env
  db:
    image: postgres
    container_name: db
    restart: always
    # set shared memory limit when using docker compose
    # shm_size: 128mb
    expose:
      - "5432"
    networks:
      - backend
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_MULTIPLE_DATABASES: mvts_car_db, mvts_traffic_lights_db, mvts_congestions_db, mvts_users_db, mvts_shipments_db, mvts_routes_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    # env_file:
    #   - ./postgres/.env
  rmq:
    image: rabbitmq:3-management
    container_name: rmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
      - RABBITMQ_ALLOW_GUEST=true
    networks:
      - backend
      - frontend
  mqtt:
    build: 
      context: ./mosquitto
      dockerfile: Dockerfile
    container_name: mqtt
    networks:
      - backend
      - frontend
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/data:/mosquitto/data:rw
      - ./mosquitto/log:/mosquitto/log:rw
    restart: unless-stopped
volumes:
  postgres_data:

networks:
  frontend:
  backend:
